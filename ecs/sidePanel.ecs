sidePanelComponent: ()
renderComponents: [sidePanelRenderComponent()]
touchHandleComponent: sidePanelTouchComponent()

--- sidePanelComponent

colors: #{}

--- sidePanelRenderComponent

!inherit renderComponent

getRect: #sidePanelGetRect
render: #sidePanelRender
priority: 21

backColor: "#eeeeee"
textColor: "#000000"

#
var sidePanelGetRect = function(){
    return [width - 200, 75, 200, height - 135];
};

var sidePanelRender = function(game, entity, rect){
    var person = game.getPlayer();
    if (!person){
        return;
    }

    var allCards = _.filter(game.entities, entity => entity.cardComponent);
    var personCardsKnown = person.personComponent.cardsKnown();
    var sortedCards = _.groupBy(allCards, card => _.contains(personCardsKnown, card.identityComponent.key));
    var people = _.filter(game.entities, entity => entity.personComponent);
    
    ctx.fillStyle = this.backColor;
    ctxFillRect(rect);
    ctx.fillStyle = this.textColor;
    ctx.strokeStyle = this.textColor;

    var colorRects = [];

    var i = 0;
    _.each([false, true], (key) => {
        var cards = sortedCards[key];
        
        _.each(cards, (card) => {
            var cardRect = [rect[0] + 2, rect[1] + i * 30 + 2, 196, 25];
            ctxRoundedRect(cardRect);
            ctx.fillStyle = '#000000';
            ctx.fillText(card.identityComponent.name, cardRect[0] + 10, cardRect[1] + cardRect[3] - 5);
            if (key){
                var textWidth = ctx.measureText(card.identityComponent.name).width;
                var holdingPerson = _.filter(people, 
                                             person => _.contains(person.personComponent.cardsHeld, card.identityComponent.key))[0];
                ctx.fillText('(held by ' + holdingPerson.identityComponent.name + ')', cardRect[0] + textWidth + 20, 
                             cardRect[1] + cardRect[3] - 5);
                /*
                
                var midY = cardRect[1] + cardRect[3] - 10;
                ctx.beginPath();
                ctx.moveTo(cardRect[0] + 10, midY);
                ctx.lineTo(cardRect[0] + 10 + textWidth, midY);
                ctx.stroke();
                */
                
            }
            else{
                var cardKey = card.identityComponent.key;

                if (!entity.sidePanelComponent.colors[cardKey]){
                    entity.sidePanelComponent.colors[cardKey] = [false, false, false, false];
                }

                var colors = ['#ff0000', '#00ff00', '#0000ff', '#ff00ff']

                _.each(entity.sidePanelComponent.colors[cardKey], (chk, j) => {
                    var boxRect = [cardRect[0] + 100 + j * 25, cardRect[1] + 5, 15, 15];
                    if (chk){
                        ctx.fillStyle = colors[j];
                        ctxFillRect(boxRect);
                    }
                    else{
                        ctx.strokeRect(boxRect[0], boxRect[1], boxRect[2], boxRect[3]);
                    }
                    colorRects.push({
                        rect: boxRect, 
                        key: cardKey,
                        i: j});
                });
            }
            i += 1;
        });
    });

    entity.touchHandleComponent.colorRects = colorRects;
};
#

---sidePanelTouchComponent

colorRects: []
handleTouch: #sidePanelHandleTouch

#
var sidePanelHandleTouch = function(entity, game, touchPos){
    _.each(this.colorRects, (rectData) => {
        if (containsPos(rectData.rect, touchPos)){
            entity.sidePanelComponent.colors[rectData.key][rectData.i] = !entity.sidePanelComponent.colors[rectData.key][rectData.i];
        }
    });
};
#
