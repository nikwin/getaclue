answerComponent: aiAnswerComponent()
renderComponents: [aiAnswerRenderComponent()]
healthComponent: ()
intervalComponent: aiAnswerIntervalComponent()

--- aiAnswerComponent

!inherit answerComponent

tryAnswer: #aiTryAnswer
waiting: true

#
var aiTryAnswer = function(question, game){
    if (this.waiting){
        return false;
    }

    var person = game.entityForUid(this.personId);
    
    var categories = Object.keys(question.questionComponent.cardsChosen);
    while (categories.length > 0){
        var category = _.sample(categories);
        categories.splice(categories.indexOf(category), 1);

        var card = question.questionComponent.cardsChosen[category];
        if (_.contains(person.personComponent.cardsHeld, card)){
            return {
                card: card,
                success: true
            };
        }
    }

    return {success: false};
};
#

--- aiAnswerRenderComponent

!inherit renderComponent

getRect: #aiAnswerGetRect
priority: 20
render: #aiAnswerRender

backColor: "#ccaaaa"

#
var aiAnswerGetRect = function(){
    return [width / 2 - 300, height / 2 - 200, 600, 400];
};

var aiAnswerRender = function(game, entity, rect){
    ctx.fillStyle = this.backColor;
    ctxFillRect(rect);

    ctx.fillStyle = '#000000';
    var person = game.entityForUid(entity.answerComponent.personId);
    ctx.textAlign = 'center';
    ctx.fillText(person.identityComponent.name + ' is thinking.', width / 2, height / 2);
    ctx.textAlign = 'left';
};
#

--- aiAnswerIntervalComponent

thinkingInterval: 2
updateInterval: #aiAnswerUpdateInterval

#
var aiAnswerUpdateInterval = function(entity, game, interval){
    this.thinkingInterval -= interval;
    if (this.thinkingInterval < 0){
        entity.answerComponent.waiting = false;
    }
};
#
