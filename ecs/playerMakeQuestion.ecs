healthComponent: ()
questionMakingComponent: playerQuestionMakingComponent()
renderComponents: [playerMakeQuestionRenderComponent()]
touchHandleComponent: playerMakeQuestionTouchHandleComponent()

--- playerQuestionMakingComponent

!inherit questionMakingComponent

makeQuestion: #playerMakeQuestionFn
firstConfirm: false
confirmed: false
question: "question"
isGuess: false

cardsChosen: #{}

#
var playerMakeQuestionFn = function(entity, game, person){
    if (this.confirmed){
        return game.makeEntities(entity, this.question, {
            cardsChosen: this.cardsChosen,
            personId: person.uid,
            isGuess: this.isGuess
        })[0];
    }
    return false;
};
#

--- playerMakeQuestionRenderComponent

!inherit renderComponent

getRect: #playerMakeQuestionGetRect
priority: 18
render: #playerMakeQuestionRender

#
var playerMakeQuestionGetRect = function(){
    return [10, 10, 800, 725];
};

var playerMakeQuestionRender = function(game, entity, rect){
    ctx.fillStyle = '#ccaaaa';
    ctxFillRect(rect);
        
    var touchRects = {};
    entity.touchHandleComponent.confirmRect = undefined;
    entity.touchHandleComponent.rejectRect = undefined;
    entity.touchHandleComponent.makeGuessRect = undefined;

    if (entity.questionMakingComponent.firstConfirm){
        var cards = _.map(entity.questionMakingComponent.cardsChosen, key => game.entityForKey(key));
        var cardForCategory = (category) => (_.filter(cards, card => (card.cardComponent.category == category))[0]).identityComponent.name;
        var girl = cardForCategory('girl');
        var boy = cardForCategory('boy');
        var place = cardForCategory('place');
        var txt = 'So you want to ask if it was ' + girl + ' and ' + boy + ' in the ' + place + '?';
        ctx.fillStyle = '#000000';
        ctx.textAlign = 'center';
        ctx.fillText(txt, rect[0] + rect[2] / 2, rect[1] + 200);

        ctx.textAlign = 'center';
                
        var rejectRect = [rect[0] + rect[2] / 2 - 100, rect[1] + rect[3] - 200, 200, 50];
        ctxRoundedRect(rejectRect);
        ctx.fillText("I don't know.", rejectRect[0] + rejectRect[2] / 2, rejectRect[1] + rejectRect[3] - 20)
        entity.touchHandleComponent.rejectRect = rejectRect;
        
        var makeGuessRect = [rect[0] + rect[2] / 2 - 100, rect[1] + 250, 200, 50];
        ctxRoundedRect(makeGuessRect)
        ctx.fillText("Just go public!!!!", makeGuessRect[0] + makeGuessRect[2] / 2, makeGuessRect[1] + makeGuessRect[3] - 20);
        entity.touchHandleComponent.makeGuessRect = makeGuessRect;
        
        playerMakeRenderConfirmRect('YES!', entity, rect);
    }
    else{
        var cards = _.filter(game.entities, gameEntity => gameEntity.cardComponent);
        var sortedCards = _.groupBy(cards, card => card.cardComponent.category);

        var idx = 0;

        _.each(sortedCards, (cards, key) => {
            ctx.fillStyle = '#000000';
            var y = rect[1] + 150 * idx + 200;
            ctx.fillText(key, rect[0] + 10, y);
            
            ctx.textAlign = 'center';
            _.each(cards, (card, i) => {
                var cardRect = [rect[0] + 55 + 100 * i, y - 60, 90, 120];
                card.cardRenderComponent.cardRender(card, cardRect,
                                                    card.identityComponent.key == entity.questionMakingComponent.cardsChosen[key]);
                touchRects[card.identityComponent.key] = cardRect;
            });
            ctx.textAlign = 'left';
            
            idx += 1;
        });

        if (_.all(sortedCards, (card, key) => entity.questionMakingComponent.cardsChosen[key])){
            playerMakeRenderConfirmRect('Sounds Good!', entity, rect);
        }
    }

    entity.touchHandleComponent.touchRects = touchRects;
};

var playerMakeRenderConfirmRect = function(confirmText, entity, rect){
    var confirmRect = [rect[0] + rect[2] / 2 - 100, rect[1] + rect[3] - 100, 200, 50];
    ctxRoundedRect(confirmRect);
    ctx.textAlign = 'center';
    ctx.fillText(confirmText, confirmRect[0] + confirmRect[2] / 2, confirmRect[1] + confirmRect[3] / 2 + 5);
    ctx.textAlign = 'left';
    
    entity.touchHandleComponent.confirmRect = confirmRect;
};
#

--- playerMakeQuestionTouchHandleComponent

handleTouch: #playerMakeQuestionHandleTouch

touchRects: #undefined
confirmRect: #undefined
rejectRect: #undefined
makeGuessRect: #undefined

#
var playerMakeQuestionHandleTouch = function(entity, game, touchPos){
    _.each(this.touchRects, (rect, key) => {
        if (containsPos(rect, touchPos)){
            var card = game.entityForKey(key);
            entity.questionMakingComponent.cardsChosen[card.cardComponent.category] = card.identityComponent.key;
        }
    });

    if (this.confirmRect && containsPos(this.confirmRect, touchPos)){
        if (entity.questionMakingComponent.firstConfirm){
            entity.questionMakingComponent.confirmed = true;
        }
        else{
            entity.questionMakingComponent.firstConfirm = true;
        }
    }

    if (this.rejectRect && containsPos(this.rejectRect, touchPos) && entity.questionMakingComponent.firstConfirm){
        entity.questionMakingComponent.firstConfirm = false;
    }

    if (this.makeGuessRect && containsPos(this.makeGuessRect, touchPos)){
        entity.questionMakingComponent.confirmed = true;
        entity.questionMakingComponent.isGuess = true;
    }
};
#
